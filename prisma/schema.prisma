// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  userName         String?  @unique  @db.VarChar(20)
  name         String?  @db.VarChar(20)
  email         String   @unique
  emailVerified DateTime?
  image         String?
  bio     String?   @db.VarChar(500)
  posts         Post[]
  likes         Like[]
  Reply         Reply[]
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  media     String? @db.VarChar(500)
  link      String?
  body      String @db.VarChar(500)
  likes     Like[]
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Reply {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  media     String?
  body      String   @db.VarChar(500)
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  replyId   String?  
  postType  PostType
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([replyId])
}

enum PostType {
    POST
    REPLY
}